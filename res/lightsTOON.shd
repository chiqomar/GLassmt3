struct light {
	vec3 position;
	vec3 direction;
	vec3 ambient;
	vec3 specular;
	vec3 diffuse;
	vec3 attenuation;
	float cutoff;
	float exponent;
};

//UNIFORMS START
uniform int dirNum;
uniform int ptNum;
uniform int spotNum;
uniform light di[3];
uniform light pt[3];
uniform light sp[3];

float stepmix(float edge0, float edge1, float E, float x)
{
    float T = clamp(0.5 * (x - edge0 + E) / E, 0.0, 1.0);
    return mix(edge0, edge1, T);
}


void lights(inout vec3 ambient, inout vec3 diffuse, inout vec3 specular, vec3 vertex, vec3 normal, float shininess, light lt, int type)
{
	vec3 light_direction;
	float light_distance;
	float att,spotdot,spotatt;
	float df;
	float sf;
	vec3 H;

	if (type == 1 || type == 2) {
		light_direction = lt.position - vertex;
		light_distance = length(light_direction);
		light_direction /= light_distance;
		// df = max(0.0, dot(normal, normalize(lt.position)));
		// H = normalize(normalize(lt.position) + vertex);
		// sf = max(0.0, dot(normal, H));
		// sf = pow(sf,shininess);
		} else {
			light_direction = lt.direction;
			att = 1.0;
		}
			df = max(0.0, dot(normal, normalize(light_direction)));
			H = normalize(normalize(light_direction) + vertex);
			sf = max(0.0, dot(normal, H));
			sf = pow(sf,shininess);

	const float A = 0.1;
  const float B = 0.3;
  const float C = 0.6;
  const float D = 1.0;
  float E = fwidth(df);

  if      (df > A - E && df < A + E) df = stepmix(A, B, E, df);
  else if (df > B - E && df < B + E) df = stepmix(B, C, E, df);
  else if (df > C - E && df < C + E) df = stepmix(C, D, E, df);
  else if (df < A) df = 0.0;
  else if (df < B) df = B;
  else if (df < C) df = C;
  else df = D;

  E = fwidth(sf);

  if (sf > 0.5 - E && sf < 0.5 + E)
  {
      sf = smoothstep(0.5 - E, 0.5 + E, sf);
  }
  else
  {
      sf = step(0.5, sf);
  }

		vec3 eye_direction = -vertex;
		float eye_distance = length(eye_direction);
		eye_direction /= eye_distance;

		if (type == 1 || type == 2) {
			att = 1.0/(lt.attenuation[0] + lt.attenuation[1]*light_distance + lt.attenuation[2]*light_distance*light_distance);
		}
		if (type == 2) {
			spotdot = dot(-light_direction, lt.direction);
			spotatt = 0.0;
			if (spotdot >= lt.cutoff)
			spotatt = pow(spotdot, lt.exponent);
			att *= spotatt;
		}

		if (type == 2) {
			eye_direction = normalize(eye_direction);
		}
		vec3 half_vector = normalize(light_direction + eye_direction);
		float normal_o_light_direction = max(0.0f, dot(normal, light_direction));
		float normal_o_half_vector = max(0.0f, dot(normal, half_vector));

		float power_factor = 0.0;
		if (normal_o_light_direction > 0.0) {
			power_factor = pow(normal_o_half_vector, shininess);
		}
		ambient += lt.ambient*att;
		diffuse += lt.diffuse*normal_o_light_direction*att*df;
		specular += lt.specular*power_factor*att*sf;
	}

	vec3 shadeit(vec3 em, vec3 amb, vec3 dif, vec3 spec, float shiny, vec3 vertex, vec3 normal) {
		vec3 ambLight = vec3(0.0, 0.0, 0.0);
		vec3 difLight = vec3(0.0, 0.0, 0.0);
		vec3 specLight = vec3(0.0, 0.0, 0.0);

		for (int i = 0; i < dirNum + 1; i++) {
			lights(ambLight,difLight,specLight,vertex,normal,shiny,di[i], 0);
		}
		for (int i = 0; i < ptNum + 1; i++) {
			lights(ambLight,difLight,specLight,vertex,normal,shiny,pt[i], 1);
		}

		for (int i = 0; i < spotNum + 1; i++) {
			lights(ambLight,difLight,specLight,vertex,normal,shiny,sp[i], 2);
		}

		vec3 lights = em + amb * ambLight + dif * difLight + spec * specLight;

		return clamp(lights,0.0,1.0);

	}
