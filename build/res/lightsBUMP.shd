struct light {
	vec3 position;
	vec3 direction;
	vec3 ambient;
	vec3 specular;
	vec3 diffuse;
	vec3 attenuation;
	float cutoff;
	float exponent;
};

//UNIFORMS START
uniform int dirNum;
uniform int ptNum;
uniform int spotNum;
uniform light di[3];
uniform light pt[3];
uniform light sp[3];
uniform sampler2D normalmap; // normal map
uniform sampler2D texture; // color map
varying vec2 texcoord;
varying vec3 eye_space_normal;
varying vec3 eye_space_vertex;


// http://www.thetenthplanet.de/archives/1180
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}
 
vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)
   vec3 map = texture2D(normalmap, texcoord ).xyz;
   map = map * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame(N, -V, texcoord);
    return normalize(TBN * map);
}

void lights(inout vec3 ambient, inout vec3 diffuse, inout vec3 specular, vec3 vertex, vec3 normal, float shininess, light lt, int type)
{
	vec3 light_direction;
	float light_distance;
	float att,spotdot,spotatt;

  vec2 uv = texcoord.st;

	if (type == 1 || type == 2) {
		light_direction = lt.position - vertex;
		light_distance = length(light_direction);
		light_direction /= light_distance;
		} else {
			light_direction = lt.direction;
			att = 1.0;
		}

		vec3 eye_direction = -vertex;
		float eye_distance = length(eye_direction);
		eye_direction /= eye_distance;

  vec3 PN = perturb_normal(normal, vertex, uv);
  float lambertTerm = dot(PN, normalize(light_direction));
  if (lambertTerm == 0.0) {
  	lambertTerm = 1.0;
  }


    //final_color += light_diffuse * material_diffuse * lambertTerm * tex01_color;  
    
    vec3 E = normalize(eye_direction);
    vec3 R = reflect(-light_direction, PN);
    //float specular = pow( max(dot(R, E), 0.0), shininess);
    //final_color += light_specular * material_specular * specular;  



		if (type == 1 || type == 2) {
			att = 1.0/(lt.attenuation[0] + lt.attenuation[1]*light_distance + lt.attenuation[2]*light_distance*light_distance);
		}
		if (type == 2) {
			spotdot = dot(-light_direction, lt.direction);
			spotatt = 0.0;
			if (spotdot >= lt.cutoff)
			spotatt = pow(spotdot, lt.exponent);
			att *= spotatt;
		}

		if (type == 2) {
			eye_direction = normalize(eye_direction);
		}
		vec3 half_vector = normalize(light_direction + eye_direction);
		float normal_o_light_direction = max(0.0f, dot(normal, light_direction));
		float normal_o_half_vector = max(0.0f, dot(normal, half_vector));

		float power_factor = 0.0;
		if (normal_o_light_direction > 0.0) {
			power_factor = pow( max(dot(R, E), 0.0), shininess);
		}
		ambient += lt.ambient*att;
		diffuse += lt.diffuse*att*lambertTerm;
		specular += lt.specular*power_factor*att;
	}

	vec3 shadeit(vec3 em, vec3 amb, vec3 dif, vec3 spec, float shiny, vec3 vertex, vec3 normal) {
		vec3 ambLight = vec3(0.0, 0.0, 0.0);
		vec3 difLight = vec3(0.0, 0.0, 0.0);
		vec3 specLight = vec3(0.0, 0.0, 0.0);

		for (int i = 0; i < dirNum + 1; i++) {
			lights(ambLight,difLight,specLight,vertex,normal,shiny,di[i], 0);
		}
		for (int i = 0; i < ptNum + 1; i++) {
			lights(ambLight,difLight,specLight,vertex,normal,shiny,pt[i], 1);
		}

		for (int i = 0; i < spotNum + 1; i++) {
			lights(ambLight,difLight,specLight,vertex,normal,shiny,sp[i], 2);
		}

		vec3 lights = em + amb * ambLight + dif * difLight + spec * specLight;

		return clamp(lights,0.0,1.0);

	}
