struct light {
	vec3 position;
	vec3 direction;
	vec3 ambient;
	vec3 specular;
	vec3 diffuse;
	vec3 attenuation;
	float cutoff;
	float exponent;
};

//UNIFORMS START
uniform int dirNum;
uniform int ptNum;
uniform int spotNum;
uniform light di[3];
uniform light pt[3];
uniform light sp[3];

void lights(inout vec3 ambient, inout vec3 diffuse, inout vec3 specular, vec3 vertex, vec3 normal, float shininess, light lt, int type)
{
	vec3 light_direction;
	float light_distance;
	float att,spotdot,spotatt;

	if (type == 1 || type == 2) {
		light_direction = lt.position - vertex;
		light_distance = length(light_direction);
		light_direction /= light_distance;
	} else {
		light_direction = lt.direction;
		att = 1.0;
	}

	vec3 eye_direction = -vertex;
	float eye_distance = length(eye_direction);
	eye_direction /= eye_distance;

	if (type == 1 || type == 2) {
		att = 1.0/(lt.attenuation[0] + lt.attenuation[1]*light_distance + lt.attenuation[2]*light_distance*light_distance);
	}
	if (type == 2) {
		spotdot = dot(-light_direction, lt.direction);
		spotatt = 0.0;
		if (spotdot >= lt.cutoff)
		spotatt = pow(spotdot, lt.exponent);
		att *= spotatt;
	}

	if (type == 2) {
		eye_direction = normalize(eye_direction);
	}
	vec3 half_vector = normalize(light_direction + eye_direction);
	float normal_o_light_direction = max(0.0f, dot(normal, light_direction));
	float normal_o_half_vector = max(0.0f, dot(normal, half_vector));

	float power_factor = 0.0;
	if (normal_o_light_direction > 0.0) {
		power_factor = pow(normal_o_half_vector, shininess);
	}
	ambient += lt.ambient*att;
	diffuse += lt.diffuse*normal_o_light_direction*att;
	specular += lt.specular*power_factor*att;
}

vec3 shadeit(vec3 em, vec3 amb, vec3 dif, vec3 spec, float shiny, vec3 vertex, vec3 normal) {
	vec3 ambLight = vec3(0.0, 0.0, 0.0);
	vec3 difLight = vec3(0.0, 0.0, 0.0);
	vec3 specLight = vec3(0.0, 0.0, 0.0);

	for (int i = 0; i < dirNum + 1; i++) {
		lights(ambLight,difLight,specLight,vertex,normal,shiny,di[i], 0);
	}
	for (int i = 0; i < ptNum + 1; i++) {
		lights(ambLight,difLight,specLight,vertex,normal,shiny,pt[i], 1);
	}

	for (int i = 0; i < spotNum + 1; i++) {
		lights(ambLight,difLight,specLight,vertex,normal,shiny,sp[i], 2);
	}

	vec3 lights = em + amb * ambLight + dif * difLight + spec * specLight;

	return clamp(lights,0.0,1.0);

}
